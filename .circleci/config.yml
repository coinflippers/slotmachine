version: 2
jobs:
  unit-tests:
    docker:
      - image: circleci/node:8.9.1
    working_directory: ~/circleci
    steps:
      - checkout
      - restore_cache:
          keys: 
            - yarn-cache-{{ .Branch }}-{{ checksum "yarn.lock" }}
            - yarn-cache-{{ .Branch }}-
            - yarn-cache-
      - run:
          name: Install dependencies
          command: yarn
      - save_cache:
          key: yarn-cache-{{ .Branch }}-{{ checksum "yarn.lock" }}
          paths:
            - "~/.cache/yarn/v1"
      - run: 
          name: Create test and coverage directories
          command: |
            mkdir ~/junit
            mkdir ~/coverage
      - run:
          name: Run unit tests with coverage
          command: yarn test:unit
      - run:
          name: Copy test results and coverage to artifact folders
          command: |
            cp junit.xml ~/junit/junit.xml
            cp -a coverage/. ~/coverage/
          when: always
      - store_test_results:
          path: ~/junit
      - store_artifacts:
          path: ~/junit
      - store_artifacts:
          path: ~/coverage
      - persist_to_workspace:
          root: .
          paths: .

  eslint:
    docker:
      - image: circleci/node:8.9.1
    working_directory: ~/circleci
    steps:
      - attach_workspace:
          at: ~/circleci
      - run:
          name: Create eslint directory
          command: mkdir ~/eslint
      - run:
          name: eslint
          command: yarn lint
      - run:
          name: copy eslint.html to artifact folder
          command: cp eslint.html ~/eslint/eslint.html
          when: always
      - store_artifacts:
          path: ~/eslint

  integration-tests:
    docker:
      - image: fmenkes/docker-compose-git
    steps:
      - checkout
      - setup_remote_docker
      - restore_cache:
          keys:
            - v1-{{ .Branch }}
          paths:
            - /caches/app.tar
      - run:
          name: Load Docker image layer cache
          command: |
            set +o pipefail
            docker load -i /caches/app.tar | true
      - run:
          name: Build application Docker image
          command: |
            docker build --cache-from=$DOCKER_HUB_CONTAINER_NAME -t $DOCKER_HUB_CONTAINER_NAME .
      - run:
          name: Save Docker image layer cache
          command: |
            mkdir -p /caches
            docker save -o /caches/app.tar $DOCKER_HUB_CONTAINER_NAME
      - save_cache:
          key: v1-{{ .Branch }}-{{ epoch }}
          paths:
            - /caches/app.tar
      - run: 
          name: Create test directory
          command: mkdir ~/junit
      - run:
          name: Run tests
          command: docker-compose -f docker-compose-test.yml up --abort-on-container-exit
      - run:
          name: Copy test results to artifact folder
          command: |
            docker cp web:${WORKING_DIRECTORY}/junit.xml ~/junit/junit.xml
          when: always
      - run:
          name: Login to Docker Hub
          command: |
            if [ "${CIRCLE_BRANCH}" == "master" ]; then
              docker login -u $DOCKER_USER -p $DOCKER_PASSWORD
            fi
      - run:
          name: Push image to Docker Hub
          command: |
            if [ "${CIRCLE_BRANCH}" == "master" ]; then
              docker push $DOCKER_HUB_CONTAINER_NAME
            fi
      - store_test_results:
          path: ~/junit
      - store_artifacts:
          path: ~/junit
          directory: tests

  staging:
    docker:
      - image: williamyeh/ansible:ubuntu16.04
    working_directory: ~/tmp
    steps:
      - checkout
      - run:
          name: Append variables to host_vars file
          command: |
            echo "working_directory: ${WORKING_DIRECTORY}
            DOCKER_USER: ${DOCKER_USER}
            DOCKER_PASSWORD: ${DOCKER_PASSWORD}
            SLACK_API_TOKEN: ${SLACK_API_TOKEN_STAGING}
            SLACK_VERIFICATION_TOKEN: ${SLACK_VERIFICATION_TOKEN_STAGING}
            JENKINS_URL: ${JENKINS_URL}
            JENKINS_USERNAME: ${JENKINS_USERNAME}
            JENKINS_PASSWORD: ${JENKINS_PASSWORD}
            GITHUB_WEBHOOK_RES_URL: ${GITHUB_WEBHOOK_RES_URL}
            GITHUB_TOKEN: ${GITHUB_TOKEN}" >> devops/environments/staging/host_vars/$ANSIBLE_HOSTNAME
      - run: 
          name: Run Ansible playbook
          command: ansible-playbook -i devops/environments/staging/inventory.yml devops/site.yml
    
  deploy:
    docker:
      - image: williamyeh/ansible:ubuntu16.04
    working_directory: ~/tmp
    steps:
      - checkout
      - run:
          name: Append variables to host_vars file
          command: |
            echo "working_directory: ${WORKING_DIRECTORY}
            DOCKER_USER: ${DOCKER_USER}
            DOCKER_PASSWORD: ${DOCKER_PASSWORD}
            SLACK_API_TOKEN: ${SLACK_API_TOKEN_PRODUCTION}
            SLACK_VERIFICATION_TOKEN: ${SLACK_VERIFICATION_TOKEN_PRODUCTION}
            JENKINS_URL: ${JENKINS_URL}
            JENKINS_USERNAME: ${JENKINS_USERNAME}
            JENKINS_PASSWORD: ${JENKINS_PASSWORD}
            GITHUB_WEBHOOK_RES_URL: ${GITHUB_WEBHOOK_RES_URL}
            GITHUB_TOKEN: ${GITHUB_TOKEN}" >> devops/environments/production/host_vars/$ANSIBLE_HOSTNAME
      - run: 
          name: Run Ansible playbook
          command: ansible-playbook -i devops/environments/production/inventory.yml devops/site.yml

  
workflows:
  version: 2
  circleci:
    jobs:
      - unit-tests
      - eslint:
          requires:
            - unit-tests
      - integration-tests:
          requires:
            - unit-tests
      - staging:
          requires:
            - integration-tests
          filters:
            branches:
              only: master
      - hold:
          type: approval
          requires:
            - integration-tests
          filters:
            branches:
              only: master
      - deploy:
          requires:
            - hold